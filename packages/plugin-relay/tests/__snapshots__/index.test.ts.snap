// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`relay example schema > generates expected schema 1`] = `
"type Answer {
  count: Int!
  id: ID!
  value: String!
}

type BatchNumber implements Node {
  id: ID!
  number: Int!
}

type CursorObject {
  id: ID!
}

"""input type"""
input CustomInputName {
  clientMutationId: ID!
  id: ID!
}

"""output type"""
type CustomOutputName {
  clientMutationId: ID!
  itWorked: Boolean!
}

input ExampleMutationInput {
  clientMutationId: ID!
  id: ID!
}

type ExampleMutationPayload {
  clientMutationId: ID!
  itWorked: Boolean!
}

input GlobalIDInput {
  circular: GlobalIDInput
  circularWithoutGlobalIds: NoGlobalIDInput
  id: ID!
  idList: [ID]!
  otherList: [OtherInput!] = [{someField: "abc"}]
}

type IDResult {
  arg: String!
  id: String!
  idType: String!
  typename: String!
}

type IDWithColon implements Node {
  id: ID!
  idString: String!
}

type Mutation {
  answerPoll(answer: Int!, id: ID!): Poll!
  createPoll(answers: [String!]!, question: String!): Poll!
  exampleMutation(input: ExampleMutationInput!): ExampleMutationPayload!
  exampleMutationReUse(input: ExampleMutationInput!): ExampleMutationPayload!

  """mutation field"""
  exampleWithDescriptions(customInput: CustomInputName!): CustomOutputName!
  noInput(status: Int): NoInputPayload!
}

input NoGlobalIDInput {
  circular: NoGlobalIDInput
  id: ID
}

type NoInputPayload {
  clientMutationId: ID!
  itWorked: Boolean!
}

interface Node {
  id: ID!
}

type Number implements Node {
  id: ID!
  number: Int!
}

type NumberRef implements Node {
  id: ID!
}

input OtherInput {
  someField: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Poll implements Node {
  answers: [Answer!]!
  answersConnection(after: ID, before: ID, first: Int, last: Int): PollAnswersConnection!
  answersUsingOffset(after: ID, before: ID, first: Int, last: Int): PollAnswersUsingOffsetConnection!
  answersWithPromises(after: ID, before: ID, first: Int, last: Int): PollAnswersWithPromisesConnection!
  answersWithoutHelpers(after: ID, before: ID, first: Int, last: Int): PollAnswersCon!
  id: ID!
  question: String!
  updatedAt: String!
}

type PollAnswersCon {
  edges: [PollAnswersConEdge]!
  pageInfo: PageInfo!
}

type PollAnswersConEdge {
  cursor: String!
  node: Answer!
}

type PollAnswersConnection {
  edges: [PollAnswersConnectionEdge]!
  pageInfo: PageInfo!
}

type PollAnswersConnectionEdge {
  cursor: String!
  node: Answer!
}

type PollAnswersUsingOffsetConnection {
  edges: [PollAnswersUsingOffsetConnectionEdge]!
  pageInfo: PageInfo!
}

type PollAnswersUsingOffsetConnectionEdge {
  cursor: String!
  node: Answer!
}

type PollAnswersWithPromisesConnection {
  edges: [PollAnswersWithPromisesConnectionEdge]!
  pageInfo: PageInfo!
}

type PollAnswersWithPromisesConnectionEdge {
  cursor: String!
  node: Answer!
}

type Query {
  associatingReturnType(after: ID, before: ID, first: Int, last: Int): QueryAssociatingReturnTypeConnection!
  batchNumbers(after: ID, before: ID, first: Int, last: Int): QueryBatchNumbersConnection!
  cursorConnection(after: ID, before: ID, first: Int, last: Int): QueryCursorConnection!
  echoIDs(genericNumberThingID: ID!, globalID: ID!, numberThingID: ID!): [IDResult!]!
  extraNode: Node
  idWithColon(id: ID!): IDWithColon!
  idsWithColon(ids: [ID!]!): [IDWithColon!]!
  inputGlobalID(id: ID!, idList: [ID]!, inputObj: GlobalIDInput!, normalId: ID!): String!
  moreNodes: [Node]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  numberRef: NumberRef!
  numberThingByID(id: ID!): Number
  numberThingsByIDs(ids: [ID!]!): [Number!]
  numbers(after: ID, before: ID, first: Int, last: Int): QueryNumbersConnection!
  oddNumbers(after: ID, before: ID, first: Int, last: Int): QueryOddNumbersConnection!
  poll(id: Int!): Poll
  pollIds: [ID!]!
  polls: [Poll!]!
  pollsConnection(after: ID, before: ID, first: Int, last: Int): QueryPollsConnection!
  sharedConnection(after: ID, before: ID, first: Int, last: Int): SharedConnection
  sharedConnectionAndEdge(after: ID, before: ID, complexity: Int, first: Int, last: Int): SharedConnectionAndEdge!
  sharedEdgeConnection(after: ID, before: ID, first: Int, last: Int): QuerySharedEdgeConnection!
}

type QueryAssociatingReturnTypeConnection {
  connectionField: Int
  edges: [QueryAssociatingReturnTypeConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryAssociatingReturnTypeConnectionEdge {
  cursor: String!
  edgeField: Int
  node: BatchNumber!
}

type QueryBatchNumbersConnection {
  connectionField: Int
  edges: [QueryBatchNumbersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryBatchNumbersConnectionEdge {
  cursor: String!
  edgeField: Int
  node: BatchNumber!
}

type QueryCursorConnection {
  edges: [QueryCursorConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryCursorConnectionEdge {
  cursor: String!
  node: CursorObject!
}

type QueryNumbersConnection {
  edges: [QueryNumbersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryNumbersConnectionEdge {
  cursor: String!
  node: Number!
}

type QueryOddNumbersConnection {
  edges: [QueryOddNumbersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryOddNumbersConnectionEdge {
  cursor: String!
  node: Number!
}

type QueryPollsConnection {
  """edgesField test description"""
  edges: [QueryPollsConnectionEdge]!
  extraConnectionField: String!
  pageInfo: PageInfo!
}

type QueryPollsConnectionEdge {
  cursor: String!
  extraEdgeField: Int!

  """nodeField test description"""
  node: Poll!
}

type QuerySharedEdgeConnection {
  edges: [SharedEdge]!
  pageInfo: PageInfo!
}

type SharedConnection {
  edges: [SharedConnectionEdge]!
  pageInfo: PageInfo!
}

type SharedConnectionAndEdge {
  edges: [SharedEdge]!
  pageInfo: PageInfo!
}

type SharedConnectionEdge {
  cursor: String!
  node: Number!
}

type SharedEdge {
  cursor: String!
  node: Number!
}"
`;

exports[`relay example schema > generates expected schema with additional interfaces 1`] = `
"type Customer implements Node & User {
  age: Int
  displayName: String
  id: ID!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  """node query"""
  node(id: ID!): Node

  """nodes query"""
  nodes(ids: [ID!]!): [Node]!
  nullConnection(after: String, before: String, first: Int, last: Int): QueryNullConnection
}

type QueryNullConnection {
  edges: [QueryNullConnectionEdge]
  pageInfo: PageInfo!
}

type QueryNullConnectionEdge {
  cursor: String!
  node: Boolean!
}

interface User {
  displayName: String
  id: ID
}"
`;

exports[`relay example schema > generates expected schema with globalConnectionFields 1`] = `
"type Answer {
  count: Int
  id: ID
  value: String
}

type BatchNumber implements Node {
  nodeId: ID!
  number: Int
}

"""input type"""
input CustomInputName {
  id: ID!
}

"""output type"""
type CustomOutputName {
  itWorked: Boolean
}

input ExampleMutationInput {
  id: ID!
}

type ExampleMutationPayload {
  itWorked: Boolean
}

input GlobalIDInput {
  circular: GlobalIDInput
  circularWithoutGlobalIds: NoGlobalIDInput
  id: ID!
  idList: [ID]!
}

type Mutation {
  answerPoll(answer: Int!, id: ID!): Poll
  createPoll(answers: [String!]!, question: String!): Poll
  exampleMutation(
    """mutation input arg"""
    input: ExampleMutationInput!
  ): ExampleMutationPayload

  """mutation field"""
  exampleWithDescriptions(
    """mutation input arg"""
    customInput: CustomInputName!
  ): CustomOutputName
}

input NoGlobalIDInput {
  circular: NoGlobalIDInput
  id: ID
}

"""node type"""
interface Node {
  nodeId: ID!
}

type Number implements Node {
  nodeId: ID!
  number: Int
}

"""page info type"""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Poll implements Node {
  answers: [Answer!]
  answersConnection(after: String, before: String, first: Int, last: Int): PollAnswersConnection
  answersUsingOffset(after: String, before: String, first: Int, last: Int): PollAnswersUsingOffsetConnection
  answersWithoutHelpers(after: String, before: String, first: Int, last: Int): PollAnswersCon
  nodeId: ID!
  question: String
  updatedAt: String
}

type PollAnswersCon {
  edges: [PollAnswersConEdge!]!
  nodes: [Answer]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type PollAnswersConEdge {
  cursor: String!
  node: Answer
}

type PollAnswersConnection {
  edges: [PollAnswersConnectionEdge!]!
  nodes: [Answer]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type PollAnswersConnectionEdge {
  cursor: String!
  node: Answer
}

type PollAnswersUsingOffsetConnection {
  edges: [PollAnswersUsingOffsetConnectionEdge!]!
  nodes: [Answer]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type PollAnswersUsingOffsetConnectionEdge {
  cursor: String!
  node: Answer
}

type Query {
  batchNumbers(after: String, before: String, first: Int, last: Int): QueryBatchNumbersConnection
  extraNode: Node
  inputGlobalID(id: ID!, inputObj: GlobalIDInput!, normalId: ID!): String
  moreNodes: [Node]!
  nullableNumbers(after: String, before: String, first: Int, last: Int): QueryNullableNumbersConnection
  numbers(after: String, before: String, first: Int, last: Int): QueryNumbersConnection
  oddNumbers(after: String, before: String, first: Int, last: Int): QueryOddNumbersConnection
  poll(id: Int!): Poll
  pollIds: [ID!]
  polls: [Poll!]
  pollsConnection(after: String, before: String, first: Int, last: Int): QueryPollsConnection
  sharedConnection(after: String, before: String, first: Int, last: Int): SharedConnection
}

type QueryBatchNumbersConnection {
  edges: [QueryBatchNumbersConnectionEdge!]!
  nodes: [BatchNumber]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type QueryBatchNumbersConnectionEdge {
  cursor: String!
  node: BatchNumber
}

type QueryNullableNumbersConnection {
  edges: [QueryNullableNumbersConnectionEdge!]!
  nodes: [Number]!
  other: String
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type QueryNullableNumbersConnectionEdge {
  cursor: String!
  node: Number
}

type QueryNumbersConnection {
  edges: [QueryNumbersConnectionEdge!]!
  nodes: [Number]!
  other: String
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type QueryNumbersConnectionEdge {
  cursor: String!
  node: Number
}

type QueryOddNumbersConnection {
  edges: [QueryOddNumbersConnectionEdge]!
  nodes: [Number]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type QueryOddNumbersConnectionEdge {
  cursor: String!
  node: Number!
}

type QueryPollsConnection {
  edges: [QueryPollsConnectionEdge!]!
  extraConnectionField: String
  nodes: [Poll]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type QueryPollsConnectionEdge {
  cursor: String!
  extraEdgeField: Int
  node: Poll
}

type SharedConnection {
  edges: [SharedEdge!]!
  nodes: [Number]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalCount2: Int!
}

type SharedEdge {
  cursor: String!
  node: Number
}"
`;

exports[`relay example schema > queries > query array based connections 1`] = `
{
  "data": {
    "batchNumbers": {
      "connectionField": 3,
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
          "edgeField": 0,
          "node": {
            "number": 0,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjox",
          "edgeField": 1,
          "node": {
            "number": 1,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
          "edgeField": 2,
          "node": {
            "number": 2,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
        "hasNextPage": true,
        "hasPreviousPage": false,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
      },
    },
    "beforeAndAfter": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
          "node": {
            "number": 8,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
          "node": {
            "number": 9,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
      },
    },
    "firstAfter": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
          "node": {
            "number": 2,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
          "node": {
            "number": 3,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
          "node": {
            "number": 4,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
      },
    },
    "firstAfterAtEnd": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOTg=",
          "node": {
            "number": 198,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOTk=",
          "node": {
            "number": 199,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOTk=",
        "hasNextPage": false,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOTg=",
      },
    },
    "firstAndLast": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
          "node": {
            "number": 3,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
          "node": {
            "number": 4,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
      },
    },
    "lastAtBegining": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
          "node": {
            "number": 0,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
        "hasNextPage": true,
        "hasPreviousPage": false,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
      },
    },
    "lastBefore": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo3",
          "node": {
            "number": 7,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
          "node": {
            "number": 8,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
          "node": {
            "number": 9,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjo3",
      },
    },
  },
}
`;

exports[`relay example schema > queries > query node and nodes on query type 1`] = `
{
  "data": {
    "batchNode": {
      "number": 0,
    },
    "extraNode": {
      "__typename": "Number",
      "number": 2,
    },
    "moreNodes": [
      {
        "__typename": "Number",
        "number": 2,
      },
      {
        "__typename": "Number",
        "number": 10,
      },
    ],
    "node": {
      "id": "TnVtYmVyOjI=",
      "number": 2,
    },
    "node2": {
      "number": 2,
    },
    "nodes": [
      {
        "number": 4,
      },
      {
        "number": 2,
      },
      {
        "number": 2,
      },
      {
        "batchNumber": 0,
      },
    ],
  },
}
`;

exports[`relay example schema > queries > query offset based connections 1`] = `
{
  "data": {
    "beforeAndAfter": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
          "node": {
            "number": 8,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
          "node": {
            "number": 9,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
      },
    },
    "firstAfter": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
          "node": {
            "number": 2,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
          "node": {
            "number": 3,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
          "node": {
            "number": 4,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
      },
    },
    "firstAfterAtEnd": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOTg=",
          "node": {
            "number": 198,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOTk=",
          "node": {
            "number": 199,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOTk=",
        "hasNextPage": false,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOTg=",
      },
    },
    "firstAndLast": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
          "node": {
            "number": 3,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
          "node": {
            "number": 4,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
      },
    },
    "lastAtBegining": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
          "node": {
            "number": 0,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
        "hasNextPage": true,
        "hasPreviousPage": false,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
      },
    },
    "lastBefore": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo3",
          "node": {
            "number": 7,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
          "node": {
            "number": 8,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
          "node": {
            "number": 9,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjo3",
      },
    },
    "moreOddNumbers": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjox",
          "node": {
            "number": 1,
          },
        },
        null,
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
          "node": {
            "number": 3,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
        "hasNextPage": true,
        "hasPreviousPage": true,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjox",
      },
    },
    "numbers": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
          "node": {
            "number": 0,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjox",
          "node": {
            "number": 1,
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
          "node": {
            "number": 2,
          },
        },
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
        "hasNextPage": true,
        "hasPreviousPage": false,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
      },
    },
    "oddNumbers": {
      "edges": [
        null,
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjox",
          "node": {
            "number": 1,
          },
        },
        null,
      ],
      "pageInfo": {
        "endCursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
        "hasNextPage": true,
        "hasPreviousPage": false,
        "startCursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
      },
    },
    "sharedConnection": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
          "node": {
            "id": "TnVtYmVyOjA=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjox",
          "node": {
            "id": "TnVtYmVyOjE=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
          "node": {
            "id": "TnVtYmVyOjI=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
          "node": {
            "id": "TnVtYmVyOjM=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
          "node": {
            "id": "TnVtYmVyOjQ=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo1",
          "node": {
            "id": "TnVtYmVyOjU=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo2",
          "node": {
            "id": "TnVtYmVyOjY=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo3",
          "node": {
            "id": "TnVtYmVyOjc=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
          "node": {
            "id": "TnVtYmVyOjg=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
          "node": {
            "id": "TnVtYmVyOjk=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMA==",
          "node": {
            "id": "TnVtYmVyOjEw",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMQ==",
          "node": {
            "id": "TnVtYmVyOjEx",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMg==",
          "node": {
            "id": "TnVtYmVyOjEy",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMw==",
          "node": {
            "id": "TnVtYmVyOjEz",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNA==",
          "node": {
            "id": "TnVtYmVyOjE0",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNQ==",
          "node": {
            "id": "TnVtYmVyOjE1",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNg==",
          "node": {
            "id": "TnVtYmVyOjE2",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNw==",
          "node": {
            "id": "TnVtYmVyOjE3",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOA==",
          "node": {
            "id": "TnVtYmVyOjE4",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOQ==",
          "node": {
            "id": "TnVtYmVyOjE5",
          },
        },
      ],
    },
    "sharedConnectionAndEdge": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
          "node": {
            "id": "TnVtYmVyOjA=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjox",
          "node": {
            "id": "TnVtYmVyOjE=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
          "node": {
            "id": "TnVtYmVyOjI=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
          "node": {
            "id": "TnVtYmVyOjM=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
          "node": {
            "id": "TnVtYmVyOjQ=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo1",
          "node": {
            "id": "TnVtYmVyOjU=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo2",
          "node": {
            "id": "TnVtYmVyOjY=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo3",
          "node": {
            "id": "TnVtYmVyOjc=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
          "node": {
            "id": "TnVtYmVyOjg=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
          "node": {
            "id": "TnVtYmVyOjk=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMA==",
          "node": {
            "id": "TnVtYmVyOjEw",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMQ==",
          "node": {
            "id": "TnVtYmVyOjEx",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMg==",
          "node": {
            "id": "TnVtYmVyOjEy",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMw==",
          "node": {
            "id": "TnVtYmVyOjEz",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNA==",
          "node": {
            "id": "TnVtYmVyOjE0",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNQ==",
          "node": {
            "id": "TnVtYmVyOjE1",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNg==",
          "node": {
            "id": "TnVtYmVyOjE2",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNw==",
          "node": {
            "id": "TnVtYmVyOjE3",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOA==",
          "node": {
            "id": "TnVtYmVyOjE4",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOQ==",
          "node": {
            "id": "TnVtYmVyOjE5",
          },
        },
      ],
    },
    "sharedEdgeConnection": {
      "edges": [
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjow",
          "node": {
            "id": "TnVtYmVyOjA=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjox",
          "node": {
            "id": "TnVtYmVyOjE=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoy",
          "node": {
            "id": "TnVtYmVyOjI=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoz",
          "node": {
            "id": "TnVtYmVyOjM=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo0",
          "node": {
            "id": "TnVtYmVyOjQ=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo1",
          "node": {
            "id": "TnVtYmVyOjU=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo2",
          "node": {
            "id": "TnVtYmVyOjY=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo3",
          "node": {
            "id": "TnVtYmVyOjc=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo4",
          "node": {
            "id": "TnVtYmVyOjg=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjo5",
          "node": {
            "id": "TnVtYmVyOjk=",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMA==",
          "node": {
            "id": "TnVtYmVyOjEw",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMQ==",
          "node": {
            "id": "TnVtYmVyOjEx",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMg==",
          "node": {
            "id": "TnVtYmVyOjEy",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxMw==",
          "node": {
            "id": "TnVtYmVyOjEz",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNA==",
          "node": {
            "id": "TnVtYmVyOjE0",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNQ==",
          "node": {
            "id": "TnVtYmVyOjE1",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNg==",
          "node": {
            "id": "TnVtYmVyOjE2",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxNw==",
          "node": {
            "id": "TnVtYmVyOjE3",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOA==",
          "node": {
            "id": "TnVtYmVyOjE4",
          },
        },
        {
          "cursor": "T2Zmc2V0Q29ubmVjdGlvbjoxOQ==",
          "node": {
            "id": "TnVtYmVyOjE5",
          },
        },
      ],
    },
  },
}
`;
