input BooleanFilter {
  equals: Boolean
  in: [Boolean!]
  is: Boolean
  isNot: Boolean
  not: BooleanFilter
  notIn: [Boolean!]
}

enum Category {
  CULTURE
  SCIENCE
  SPORTS
  TECH
}

input CategoryListFilter {
  equals: [Category!]
  has: Category
  hasEvery: [Category!]
  hasSome: [Category!]
  isEmpty: Boolean
}

type Comment {
  author: User
  content: String
  id: ID
  post: Post
}

input CommentCreate {
  author: CommentCreateAuthorRelationInput!
  authorId: Int!
  content: String!
  createdAt: DateTime
  id: Int
  post: CommentCreatePostRelationInput!
  postId: Int!
}

input CommentCreateAuthorRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutComments
}

input CommentCreatePostRelationInput {
  connect: PostUniqueFilter
  create: PostCreateWithoutComments
}

input CommentCreateWithoutAuthor {
  content: String!
  createdAt: DateTime
  id: Int
  post: CommentCreatePostRelationInput!
  postId: Int!
}

input CommentCreateWithoutPost {
  author: CommentCreateAuthorRelationInput!
  authorId: Int!
  content: String!
  createdAt: DateTime
  id: Int
}

input CommentFilter {
  author: UserFilter
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostFilter
  postId: IntFilter
}

input CommentListFilter {
  every: CommentFilter
  none: CommentFilter
  some: CommentFilter
}

input CommentOrderBy {
  author: UserOrderBy
  authorId: OrderBy
  content: OrderBy
  createdAt: OrderBy
  id: OrderBy
  post: PostOrderBy
  postId: OrderBy
}

input CommentUniqueFilter {
  createdAt: DateTime
  id: Int
}

input CommentUpdate {
  author: CommentUpdateAuthorRelationInput
  authorId: Int
  content: String
  createdAt: DateTime
  id: Int
  post: CommentUpdatePostRelationInput
  postId: Int
}

input CommentUpdateAuthorRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutComments
  update: UserUpdateWithoutComments
}

input CommentUpdatePostRelationInput {
  connect: PostUniqueFilter
  create: PostCreateWithoutComments
  update: PostUpdateWithoutComments
}

input CommentUpdateWithoutAuthor {
  content: String
  createdAt: DateTime
  id: Int
  post: CommentUpdatePostRelationInput
  postId: Int
}

input CommentUpdateWithoutPost {
  author: CommentUpdateAuthorRelationInput
  authorId: Int
  content: String
  createdAt: DateTime
  id: Int
}

input CommentWithoutAuthorFilter {
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostFilter
  postId: IntFilter
}

input CommentWithoutPostFilter {
  author: UserFilter
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: DateTime
  isNot: DateTime
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input FindUniqueRelationsCreate {
  id: String!
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput!
  withCompositeID_a: String!
  withCompositeID_b: String!
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput!
  withCompositeUnique_a: String!
  withCompositeUnique_b: String!
  withID: FindUniqueRelationsCreateWithIDRelationInput!
  withID_id: String!
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput!
  withUnique_id: String!
}

input FindUniqueRelationsCreateWithCompositeIDRelationInput {
  connect: WithCompositeIDUniqueFilter
  create: WithCompositeIDCreateWithoutFindUniqueRelations
}

input FindUniqueRelationsCreateWithCompositeUniqueRelationInput {
  connect: WithCompositeUniqueUniqueFilter
  create: WithCompositeUniqueCreateWithoutFindUniqueRelations
}

input FindUniqueRelationsCreateWithIDRelationInput {
  connect: WithIDUniqueFilter
  create: WithIDCreateWithoutFindUniqueRelations
}

input FindUniqueRelationsCreateWithUniqueRelationInput {
  connect: WithUniqueUniqueFilter
  create: WithUniqueCreateWithoutFindUniqueRelations
}

input FindUniqueRelationsCreateWithoutWithCompositeID {
  id: String!
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput!
  withCompositeUnique_a: String!
  withCompositeUnique_b: String!
  withID: FindUniqueRelationsCreateWithIDRelationInput!
  withID_id: String!
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput!
  withUnique_id: String!
}

input FindUniqueRelationsCreateWithoutWithCompositeUnique {
  id: String!
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput!
  withCompositeID_a: String!
  withCompositeID_b: String!
  withID: FindUniqueRelationsCreateWithIDRelationInput!
  withID_id: String!
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput!
  withUnique_id: String!
}

input FindUniqueRelationsCreateWithoutWithID {
  id: String!
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput!
  withCompositeID_a: String!
  withCompositeID_b: String!
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput!
  withCompositeUnique_a: String!
  withCompositeUnique_b: String!
  withUnique: FindUniqueRelationsCreateWithUniqueRelationInput!
  withUnique_id: String!
}

input FindUniqueRelationsCreateWithoutWithUnique {
  id: String!
  withCompositeID: FindUniqueRelationsCreateWithCompositeIDRelationInput!
  withCompositeID_a: String!
  withCompositeID_b: String!
  withCompositeUnique: FindUniqueRelationsCreateWithCompositeUniqueRelationInput!
  withCompositeUnique_a: String!
  withCompositeUnique_b: String!
  withID: FindUniqueRelationsCreateWithIDRelationInput!
  withID_id: String!
}

input FindUniqueRelationsFilter {
  id: StringFilter
  withCompositeID: WithCompositeIDFilter
  withCompositeID_a: StringFilter
  withCompositeID_b: StringFilter
  withCompositeUnique: WithCompositeUniqueFilter
  withCompositeUnique_a: StringFilter
  withCompositeUnique_b: StringFilter
  withID: WithIDFilter
  withID_id: StringFilter
  withUnique: WithUniqueFilter
  withUnique_id: StringFilter
}

input FindUniqueRelationsListFilter {
  every: FindUniqueRelationsFilter
  none: FindUniqueRelationsFilter
  some: FindUniqueRelationsFilter
}

input FindUniqueRelationsOrderBy {
  id: OrderBy
  withCompositeID: WithCompositeIDOrderBy
  withCompositeID_a: OrderBy
  withCompositeID_b: OrderBy
  withCompositeUnique: WithCompositeUniqueOrderBy
  withCompositeUnique_a: OrderBy
  withCompositeUnique_b: OrderBy
  withID: WithIDOrderBy
  withID_id: OrderBy
  withUnique: WithUniqueOrderBy
  withUnique_id: OrderBy
}

input FindUniqueRelationsUniqueFilter {
  id: String
}

input FindUniqueRelationsUpdate {
  id: String
  withCompositeID: FindUniqueRelationsUpdateWithCompositeIDRelationInput
  withCompositeID_a: String
  withCompositeID_b: String
  withCompositeUnique: FindUniqueRelationsUpdateWithCompositeUniqueRelationInput
  withCompositeUnique_a: String
  withCompositeUnique_b: String
  withID: FindUniqueRelationsUpdateWithIDRelationInput
  withID_id: String
  withUnique: FindUniqueRelationsUpdateWithUniqueRelationInput
  withUnique_id: String
}

input FindUniqueRelationsUpdateWithCompositeIDRelationInput {
  connect: WithCompositeIDUniqueFilter
  create: WithCompositeIDCreateWithoutFindUniqueRelations
  update: WithCompositeIDUpdateWithoutFindUniqueRelations
}

input FindUniqueRelationsUpdateWithCompositeUniqueRelationInput {
  connect: WithCompositeUniqueUniqueFilter
  create: WithCompositeUniqueCreateWithoutFindUniqueRelations
  update: WithCompositeUniqueUpdateWithoutFindUniqueRelations
}

input FindUniqueRelationsUpdateWithIDRelationInput {
  connect: WithIDUniqueFilter
  create: WithIDCreateWithoutFindUniqueRelations
  update: WithIDUpdateWithoutFindUniqueRelations
}

input FindUniqueRelationsUpdateWithUniqueRelationInput {
  connect: WithUniqueUniqueFilter
  create: WithUniqueCreateWithoutFindUniqueRelations
  update: WithUniqueUpdateWithoutFindUniqueRelations
}

input FindUniqueRelationsUpdateWithoutWithCompositeID {
  id: String
  withCompositeUnique: FindUniqueRelationsUpdateWithCompositeUniqueRelationInput
  withCompositeUnique_a: String
  withCompositeUnique_b: String
  withID: FindUniqueRelationsUpdateWithIDRelationInput
  withID_id: String
  withUnique: FindUniqueRelationsUpdateWithUniqueRelationInput
  withUnique_id: String
}

input FindUniqueRelationsUpdateWithoutWithCompositeUnique {
  id: String
  withCompositeID: FindUniqueRelationsUpdateWithCompositeIDRelationInput
  withCompositeID_a: String
  withCompositeID_b: String
  withID: FindUniqueRelationsUpdateWithIDRelationInput
  withID_id: String
  withUnique: FindUniqueRelationsUpdateWithUniqueRelationInput
  withUnique_id: String
}

input FindUniqueRelationsUpdateWithoutWithID {
  id: String
  withCompositeID: FindUniqueRelationsUpdateWithCompositeIDRelationInput
  withCompositeID_a: String
  withCompositeID_b: String
  withCompositeUnique: FindUniqueRelationsUpdateWithCompositeUniqueRelationInput
  withCompositeUnique_a: String
  withCompositeUnique_b: String
  withUnique: FindUniqueRelationsUpdateWithUniqueRelationInput
  withUnique_id: String
}

input FindUniqueRelationsUpdateWithoutWithUnique {
  id: String
  withCompositeID: FindUniqueRelationsUpdateWithCompositeIDRelationInput
  withCompositeID_a: String
  withCompositeID_b: String
  withCompositeUnique: FindUniqueRelationsUpdateWithCompositeUniqueRelationInput
  withCompositeUnique_a: String
  withCompositeUnique_b: String
  withID: FindUniqueRelationsUpdateWithIDRelationInput
  withID_id: String
}

input FindUniqueRelationsWithoutWithCompositeIDFilter {
  id: StringFilter
  withCompositeUnique: WithCompositeUniqueFilter
  withCompositeUnique_a: StringFilter
  withCompositeUnique_b: StringFilter
  withID: WithIDFilter
  withID_id: StringFilter
  withUnique: WithUniqueFilter
  withUnique_id: StringFilter
}

input FindUniqueRelationsWithoutWithCompositeUniqueFilter {
  id: StringFilter
  withCompositeID: WithCompositeIDFilter
  withCompositeID_a: StringFilter
  withCompositeID_b: StringFilter
  withID: WithIDFilter
  withID_id: StringFilter
  withUnique: WithUniqueFilter
  withUnique_id: StringFilter
}

input FindUniqueRelationsWithoutWithIDFilter {
  id: StringFilter
  withCompositeID: WithCompositeIDFilter
  withCompositeID_a: StringFilter
  withCompositeID_b: StringFilter
  withCompositeUnique: WithCompositeUniqueFilter
  withCompositeUnique_a: StringFilter
  withCompositeUnique_b: StringFilter
  withUnique: WithUniqueFilter
  withUnique_id: StringFilter
}

input FindUniqueRelationsWithoutWithUniqueFilter {
  id: StringFilter
  withCompositeID: WithCompositeIDFilter
  withCompositeID_a: StringFilter
  withCompositeID_b: StringFilter
  withCompositeUnique: WithCompositeUniqueFilter
  withCompositeUnique_a: StringFilter
  withCompositeUnique_b: StringFilter
  withID: WithIDFilter
  withID_id: StringFilter
}

input FollowCreate {
  from: FollowCreateFromRelationInput!
  fromId: Int!
  to: FollowCreateToRelationInput!
  toId: Int!
}

input FollowCreateFromRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowing
}

input FollowCreateToRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowers
}

input FollowCreateWithoutFrom {
  to: FollowCreateToRelationInput!
  toId: Int!
}

input FollowCreateWithoutTo {
  from: FollowCreateFromRelationInput!
  fromId: Int!
}

input FollowFilter {
  from: UserFilter
  fromId: IntFilter
  to: UserFilter
  toId: IntFilter
}

input FollowListFilter {
  every: FollowFilter
  none: FollowFilter
  some: FollowFilter
}

input FollowOrderBy {
  from: UserOrderBy
  fromId: OrderBy
  to: UserOrderBy
  toId: OrderBy
}

input FollowUniqueFilter {
  compositeID: Int
}

input FollowUpdate {
  from: FollowUpdateFromRelationInput
  fromId: Int
  to: FollowUpdateToRelationInput
  toId: Int
}

input FollowUpdateFromRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowing
  update: UserUpdateWithoutFollowing
}

input FollowUpdateToRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowers
  update: UserUpdateWithoutFollowers
}

input FollowUpdateWithoutFrom {
  to: FollowUpdateToRelationInput
  toId: Int
}

input FollowUpdateWithoutTo {
  from: FollowUpdateFromRelationInput
  fromId: Int
}

input FollowWithoutFromFilter {
  to: UserFilter
  toId: IntFilter
}

input FollowWithoutToFilter {
  from: UserFilter
  fromId: IntFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: Int
  isNot: Int
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

input IntListFilter {
  equals: [Int!]
  has: Int
  hasEvery: [Int!]
  hasSome: [Int!]
  isEmpty: Boolean
}

input MediaCreate {
  id: Int
  posts: MediaCreatePostsRelationInput
  uploadedBy: MediaCreateUploadedByRelationInput
  uploadedById: Int
  url: String!
}

input MediaCreatePostsRelationInput {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutMedia!]
}

input MediaCreateUploadedByRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutMedia
}

input MediaCreateWithoutPosts {
  id: Int
  uploadedBy: MediaCreateUploadedByRelationInput
  uploadedById: Int
  url: String!
}

input MediaCreateWithoutUploadedBy {
  id: Int
  posts: MediaCreatePostsRelationInput
  url: String!
}

input MediaFilter {
  id: IntFilter
  posts: PostMediaListFilter
  uploadedBy: UserFilter
  uploadedById: IntFilter
  url: StringFilter
}

input MediaListFilter {
  every: MediaFilter
  none: MediaFilter
  some: MediaFilter
}

input MediaOrderBy {
  id: OrderBy
  posts: PostMediaOrderBy
  uploadedBy: UserOrderBy
  uploadedById: OrderBy
  url: OrderBy
}

input MediaUniqueFilter {
  id: Int
}

input MediaUpdate {
  id: Int
  posts: MediaUpdatePostsRelationInput
  uploadedBy: MediaUpdateUploadedByRelationInput
  uploadedById: Int
  url: String
}

input MediaUpdatePostsRelationInput {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutMedia!]
  delete: [PostMediaUniqueFilter!]
  deleteMany: [PostMediaWithoutMediaFilter!]
  disconnect: [PostMediaUniqueFilter!]
  set: [PostMediaUniqueFilter!]
  update: [MediaUpdatePostsRelationInputUpdate!]
  updateMany: [MediaUpdatePostsRelationInputUpdateMany!]
}

input MediaUpdatePostsRelationInputUpdate {
  data: PostMediaUpdateWithoutMedia
  where: PostMediaUniqueFilter
}

input MediaUpdatePostsRelationInputUpdateMany {
  data: PostMediaUpdateWithoutMedia
  where: PostMediaWithoutMediaFilter
}

input MediaUpdateUploadedByRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutMedia
  update: UserUpdateWithoutMedia
}

input MediaUpdateWithoutPosts {
  id: Int
  uploadedBy: MediaUpdateUploadedByRelationInput
  uploadedById: Int
  url: String
}

input MediaUpdateWithoutUploadedBy {
  id: Int
  posts: MediaUpdatePostsRelationInput
  url: String
}

input MediaWithoutUploadedByFilter {
  id: IntFilter
  posts: PostMediaListFilter
  url: StringFilter
}

type Mutation {
  createPost(data: PostCreate!): Post
  createUser(data: UserCreate!): User
  deleteManyPosts(where: PostFilter!): Boolean
  deletePost(where: PostUniqueFilter!): Post
  deleteUser(where: UserUniqueFilter!): User
  updatePost(data: PostUpdate!, where: PostUniqueFilter!): Post
  updateUser(data: UserUpdate!, where: UserUniqueFilter!): User
}

enum OrderBy {
  Asc
  Desc
}

type Post {
  author: User
  categories: [Category!]
  comments(filter: CommentFilter! = {}, orderBy: CommentOrderBy! = {id: Asc}): [Comment!]
  content: String
  id: ID
  published: Boolean
  tags: [String!]
  title: String
}

input PostCreate {
  author: PostCreateAuthorRelationInput!
  authorId: Int!
  categories: [Category!]
  comments: PostCreateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelationInput
  published: Boolean
  ratings: [Int!]
  tags: [String!]
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostCreateAuthorRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutPosts
}

input PostCreateCommentsRelationInput {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutPost!]
}

input PostCreateMediaRelationInput {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutPost!]
}

input PostCreateWithoutAuthor {
  categories: [Category!]
  comments: PostCreateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelationInput
  published: Boolean
  ratings: [Int!]
  tags: [String!]
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostCreateWithoutComments {
  author: PostCreateAuthorRelationInput!
  authorId: Int!
  categories: [Category!]
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelationInput
  published: Boolean
  ratings: [Int!]
  tags: [String!]
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostCreateWithoutMedia {
  author: PostCreateAuthorRelationInput!
  authorId: Int!
  categories: [Category!]
  comments: PostCreateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  published: Boolean
  ratings: [Int!]
  tags: [String!]
  title: String!
  updatedAt: DateTime
  views: Int
}

input PostFilter {
  author: UserFilter
  authorId: IntFilter
  categories: CategoryListFilter
  comments: CommentListFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  media: PostMediaListFilter
  published: BooleanFilter
  ratings: IntListFilter
  tags: StringListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

input PostListFilter {
  every: PostFilter
  none: PostFilter
  some: PostFilter
}

input PostMediaCreate {
  id: Int
  media: PostMediaCreateMediaRelationInput!
  mediaId: Int!
  order: Int!
  post: PostMediaCreatePostRelationInput!
  postId: Int!
}

input PostMediaCreateMediaRelationInput {
  connect: MediaUniqueFilter
  create: MediaCreateWithoutPosts
}

input PostMediaCreatePostRelationInput {
  connect: PostUniqueFilter
  create: PostCreateWithoutMedia
}

input PostMediaCreateWithoutMedia {
  id: Int
  order: Int!
  post: PostMediaCreatePostRelationInput!
  postId: Int!
}

input PostMediaCreateWithoutPost {
  id: Int
  media: PostMediaCreateMediaRelationInput!
  mediaId: Int!
  order: Int!
}

input PostMediaFilter {
  id: IntFilter
  media: MediaFilter
  mediaId: IntFilter
  order: IntFilter
  post: PostFilter
  postId: IntFilter
}

input PostMediaListFilter {
  every: PostMediaFilter
  none: PostMediaFilter
  some: PostMediaFilter
}

input PostMediaOrderBy {
  id: OrderBy
  media: MediaOrderBy
  mediaId: OrderBy
  order: OrderBy
  post: PostOrderBy
  postId: OrderBy
}

input PostMediaUniqueFilter {
  id: Int
}

input PostMediaUpdate {
  id: Int
  media: PostMediaUpdateMediaRelationInput
  mediaId: Int
  order: Int
  post: PostMediaUpdatePostRelationInput
  postId: Int
}

input PostMediaUpdateMediaRelationInput {
  connect: MediaUniqueFilter
  create: MediaCreateWithoutPosts
  update: MediaUpdateWithoutPosts
}

input PostMediaUpdatePostRelationInput {
  connect: PostUniqueFilter
  create: PostCreateWithoutMedia
  update: PostUpdateWithoutMedia
}

input PostMediaUpdateWithoutMedia {
  id: Int
  order: Int
  post: PostMediaUpdatePostRelationInput
  postId: Int
}

input PostMediaUpdateWithoutPost {
  id: Int
  media: PostMediaUpdateMediaRelationInput
  mediaId: Int
  order: Int
}

input PostMediaWithoutMediaFilter {
  id: IntFilter
  order: IntFilter
  post: PostFilter
  postId: IntFilter
}

input PostMediaWithoutPostFilter {
  id: IntFilter
  media: MediaFilter
  mediaId: IntFilter
  order: IntFilter
}

input PostOrderBy {
  author: UserOrderBy
  authorId: OrderBy
  categories: OrderBy
  comments: CommentOrderBy
  content: OrderBy
  createdAt: OrderBy
  id: OrderBy
  media: PostMediaOrderBy
  published: OrderBy
  ratings: OrderBy
  tags: OrderBy
  title: OrderBy
  updatedAt: OrderBy
  views: OrderBy
}

input PostUniqueFilter {
  createdAt: DateTime
  id: Int
}

input PostUpdate {
  author: PostUpdateAuthorRelationInput
  authorId: Int
  categories: [Category!]
  comments: PostUpdateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  media: PostUpdateMediaRelationInput
  published: Boolean
  ratings: [Int!]
  tags: [String!]
  title: String
  updatedAt: DateTime
  views: Int
}

input PostUpdateAuthorRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutPosts
  update: UserUpdateWithoutPosts
}

input PostUpdateCommentsRelationInput {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutPost!]
  delete: [CommentUniqueFilter!]
  deleteMany: [CommentWithoutPostFilter!]
  disconnect: [CommentUniqueFilter!]
  set: [CommentUniqueFilter!]
  update: [PostUpdateCommentsRelationInputUpdate!]
  updateMany: [PostUpdateCommentsRelationInputUpdateMany!]
}

input PostUpdateCommentsRelationInputUpdate {
  data: CommentUpdateWithoutPost
  where: CommentUniqueFilter
}

input PostUpdateCommentsRelationInputUpdateMany {
  data: CommentUpdateWithoutPost
  where: CommentWithoutPostFilter
}

input PostUpdateMediaRelationInput {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutPost!]
  delete: [PostMediaUniqueFilter!]
  deleteMany: [PostMediaWithoutPostFilter!]
  disconnect: [PostMediaUniqueFilter!]
  set: [PostMediaUniqueFilter!]
  update: [PostUpdateMediaRelationInputUpdate!]
  updateMany: [PostUpdateMediaRelationInputUpdateMany!]
}

input PostUpdateMediaRelationInputUpdate {
  data: PostMediaUpdateWithoutPost
  where: PostMediaUniqueFilter
}

input PostUpdateMediaRelationInputUpdateMany {
  data: PostMediaUpdateWithoutPost
  where: PostMediaWithoutPostFilter
}

input PostUpdateWithoutAuthor {
  categories: [Category!]
  comments: PostUpdateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  media: PostUpdateMediaRelationInput
  published: Boolean
  ratings: [Int!]
  tags: [String!]
  title: String
  updatedAt: DateTime
  views: Int
}

input PostUpdateWithoutComments {
  author: PostUpdateAuthorRelationInput
  authorId: Int
  categories: [Category!]
  content: String
  createdAt: DateTime
  id: Int
  media: PostUpdateMediaRelationInput
  published: Boolean
  ratings: [Int!]
  tags: [String!]
  title: String
  updatedAt: DateTime
  views: Int
}

input PostUpdateWithoutMedia {
  author: PostUpdateAuthorRelationInput
  authorId: Int
  categories: [Category!]
  comments: PostUpdateCommentsRelationInput
  content: String
  createdAt: DateTime
  id: Int
  published: Boolean
  ratings: [Int!]
  tags: [String!]
  title: String
  updatedAt: DateTime
  views: Int
}

input PostWithoutAuthorFilter {
  categories: CategoryListFilter
  comments: CommentListFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  media: PostMediaListFilter
  published: BooleanFilter
  ratings: IntListFilter
  tags: StringListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

type Profile {
  bio: String
  id: ID
  user: User
}

input ProfileCreate {
  bio: String
  id: Int
  user: ProfileCreateUserRelationInput!
  userId: Int!
}

input ProfileCreateUserRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutProfile
}

input ProfileCreateWithoutUser {
  bio: String
  id: Int
}

input ProfileFilter {
  bio: StringFilter
  id: IntFilter
  user: UserFilter
  userId: IntFilter
}

input ProfileOrderBy {
  bio: OrderBy
  id: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input ProfileUniqueFilter {
  id: Int
  userId: Int
}

input ProfileUpdate {
  bio: String
  id: Int
  user: ProfileUpdateUserRelationInput
  userId: Int
}

input ProfileUpdateUserRelationInput {
  connect: UserUniqueFilter
  create: UserCreateWithoutProfile
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutProfile
}

input ProfileUpdateWithoutUser {
  bio: String
  id: Int
}

type Query {
  user(where: UserUniqueFilter!): User
  users(filter: UserFilter! = {}, orderBy: UserOrderBy! = {id: Asc}): [User!]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  is: String
  isNot: String
  lt: String
  lte: String
  mode: StringFilterMode
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

enum StringFilterMode {
  Default
  Insensitive
}

input StringListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input UnrelatedCreate {
  id: Int
  name: String
}

input UnrelatedFilter {
  id: IntFilter
  name: StringFilter
}

input UnrelatedOrderBy {
  id: OrderBy
  name: OrderBy
}

input UnrelatedUniqueFilter {
  id: Int
}

input UnrelatedUpdate {
  id: Int
  name: String
}

type User {
  email: String
  id: ID
  name: String
  posts(filter: PostFilter! = {}, orderBy: PostOrderBy! = {id: Asc}): [Post!]
  profile: Profile
}

input UserCreate {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateCommentsRelationInput {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutAuthor!]
}

input UserCreateFollowersRelationInput {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutTo!]
}

input UserCreateFollowingRelationInput {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutFrom!]
}

input UserCreateMediaRelationInput {
  connect: [MediaUniqueFilter!]
  create: [MediaCreateWithoutUploadedBy!]
}

input UserCreatePostsRelationInput {
  connect: [PostUniqueFilter!]
  create: [PostCreateWithoutAuthor!]
}

input UserCreateProfileRelationInput {
  connect: ProfileUniqueFilter
  create: ProfileCreateWithoutUser
}

input UserCreateWithoutComments {
  Media: UserCreateMediaRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutFollowers {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutFollowing {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutMedia {
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutPosts {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  profile: UserCreateProfileRelationInput
}

input UserCreateWithoutProfile {
  Media: UserCreateMediaRelationInput
  comments: UserCreateCommentsRelationInput
  email: String!
  followers: UserCreateFollowersRelationInput
  following: UserCreateFollowingRelationInput
  id: Int
  name: String
  posts: UserCreatePostsRelationInput
}

input UserFilter {
  Media: MediaListFilter
  comments: CommentListFilter
  email: StringFilter
  followers: FollowListFilter
  following: FollowListFilter
  id: IntFilter
  name: StringFilter
  posts: PostListFilter
  profile: ProfileFilter
}

input UserOrderBy {
  Media: MediaOrderBy
  comments: CommentOrderBy
  email: OrderBy
  followers: FollowOrderBy
  following: FollowOrderBy
  id: OrderBy
  name: OrderBy
  posts: PostOrderBy
  profile: ProfileOrderBy
}

input UserUniqueFilter {
  email: String
  id: Int
}

input UserUpdate {
  Media: UserUpdateMediaRelationInput
  comments: UserUpdateCommentsRelationInput
  email: String
  followers: UserUpdateFollowersRelationInput
  following: UserUpdateFollowingRelationInput
  id: Int
  name: String
  posts: UserUpdatePostsRelationInput
  profile: UserUpdateProfileRelationInput
}

input UserUpdateCommentsRelationInput {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutAuthor!]
  delete: [CommentUniqueFilter!]
  deleteMany: [CommentWithoutAuthorFilter!]
  disconnect: [CommentUniqueFilter!]
  set: [CommentUniqueFilter!]
  update: [UserUpdateCommentsRelationInputUpdate!]
  updateMany: [UserUpdateCommentsRelationInputUpdateMany!]
}

input UserUpdateCommentsRelationInputUpdate {
  data: CommentUpdateWithoutAuthor
  where: CommentUniqueFilter
}

input UserUpdateCommentsRelationInputUpdateMany {
  data: CommentUpdateWithoutAuthor
  where: CommentWithoutAuthorFilter
}

input UserUpdateFollowersRelationInput {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutTo!]
  delete: [FollowUniqueFilter!]
  deleteMany: [FollowWithoutToFilter!]
  disconnect: [FollowUniqueFilter!]
  set: [FollowUniqueFilter!]
  update: [UserUpdateFollowersRelationInputUpdate!]
  updateMany: [UserUpdateFollowersRelationInputUpdateMany!]
}

input UserUpdateFollowersRelationInputUpdate {
  data: FollowUpdateWithoutTo
  where: FollowUniqueFilter
}

input UserUpdateFollowersRelationInputUpdateMany {
  data: FollowUpdateWithoutTo
  where: FollowWithoutToFilter
}

input UserUpdateFollowingRelationInput {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutFrom!]
  delete: [FollowUniqueFilter!]
  deleteMany: [FollowWithoutFromFilter!]
  disconnect: [FollowUniqueFilter!]
  set: [FollowUniqueFilter!]
  update: [UserUpdateFollowingRelationInputUpdate!]
  updateMany: [UserUpdateFollowingRelationInputUpdateMany!]
}

input UserUpdateFollowingRelationInputUpdate {
  data: FollowUpdateWithoutFrom
  where: FollowUniqueFilter
}

input UserUpdateFollowingRelationInputUpdateMany {
  data: FollowUpdateWithoutFrom
  where: FollowWithoutFromFilter
}

input UserUpdateMediaRelationInput {
  connect: [MediaUniqueFilter!]
  create: [MediaCreateWithoutUploadedBy!]
  delete: [MediaUniqueFilter!]
  deleteMany: [MediaWithoutUploadedByFilter!]
  disconnect: [MediaUniqueFilter!]
  set: [MediaUniqueFilter!]
  update: [UserUpdateMediaRelationInputUpdate!]
  updateMany: [UserUpdateMediaRelationInputUpdateMany!]
}

input UserUpdateMediaRelationInputUpdate {
  data: MediaUpdateWithoutUploadedBy
  where: MediaUniqueFilter
}

input UserUpdateMediaRelationInputUpdateMany {
  data: MediaUpdateWithoutUploadedBy
  where: MediaWithoutUploadedByFilter
}

input UserUpdatePostsRelationInput {
  connect: [PostUniqueFilter!]
  create: [PostCreateWithoutAuthor!]
  delete: [PostUniqueFilter!]
  deleteMany: [PostWithoutAuthorFilter!]
  disconnect: [PostUniqueFilter!]
  set: [PostUniqueFilter!]
  update: [UserUpdatePostsRelationInputUpdate!]
  updateMany: [UserUpdatePostsRelationInputUpdateMany!]
}

input UserUpdatePostsRelationInputUpdate {
  data: PostUpdateWithoutAuthor
  where: PostUniqueFilter
}

input UserUpdatePostsRelationInputUpdateMany {
  data: PostUpdateWithoutAuthor
  where: PostWithoutAuthorFilter
}

input UserUpdateProfileRelationInput {
  connect: ProfileUniqueFilter
  create: ProfileCreateWithoutUser
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUser
}

input UserUpdateWithoutComments {
  Media: UserUpdateMediaRelationInput
  email: String
  followers: UserUpdateFollowersRelationInput
  following: UserUpdateFollowingRelationInput
  id: Int
  name: String
  posts: UserUpdatePostsRelationInput
  profile: UserUpdateProfileRelationInput
}

input UserUpdateWithoutFollowers {
  Media: UserUpdateMediaRelationInput
  comments: UserUpdateCommentsRelationInput
  email: String
  following: UserUpdateFollowingRelationInput
  id: Int
  name: String
  posts: UserUpdatePostsRelationInput
  profile: UserUpdateProfileRelationInput
}

input UserUpdateWithoutFollowing {
  Media: UserUpdateMediaRelationInput
  comments: UserUpdateCommentsRelationInput
  email: String
  followers: UserUpdateFollowersRelationInput
  id: Int
  name: String
  posts: UserUpdatePostsRelationInput
  profile: UserUpdateProfileRelationInput
}

input UserUpdateWithoutMedia {
  comments: UserUpdateCommentsRelationInput
  email: String
  followers: UserUpdateFollowersRelationInput
  following: UserUpdateFollowingRelationInput
  id: Int
  name: String
  posts: UserUpdatePostsRelationInput
  profile: UserUpdateProfileRelationInput
}

input UserUpdateWithoutPosts {
  Media: UserUpdateMediaRelationInput
  comments: UserUpdateCommentsRelationInput
  email: String
  followers: UserUpdateFollowersRelationInput
  following: UserUpdateFollowingRelationInput
  id: Int
  name: String
  profile: UserUpdateProfileRelationInput
}

input UserUpdateWithoutProfile {
  Media: UserUpdateMediaRelationInput
  comments: UserUpdateCommentsRelationInput
  email: String
  followers: UserUpdateFollowersRelationInput
  following: UserUpdateFollowingRelationInput
  id: Int
  name: String
  posts: UserUpdatePostsRelationInput
}

input WithCompositeIDCreate {
  FindUniqueRelations: WithCompositeIDCreateFindUniqueRelationsRelationInput
  a: String!
  b: String!
}

input WithCompositeIDCreateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithCompositeID!]
}

input WithCompositeIDCreateWithoutFindUniqueRelations {
  a: String!
  b: String!
}

input WithCompositeIDFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  a: StringFilter
  b: StringFilter
}

input WithCompositeIDOrderBy {
  FindUniqueRelations: FindUniqueRelationsOrderBy
  a: OrderBy
  b: OrderBy
}

input WithCompositeIDUniqueFilter {
  a_b: String
}

input WithCompositeIDUpdate {
  FindUniqueRelations: WithCompositeIDUpdateFindUniqueRelationsRelationInput
  a: String
  b: String
}

input WithCompositeIDUpdateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithCompositeID!]
  delete: [FindUniqueRelationsUniqueFilter!]
  deleteMany: [FindUniqueRelationsWithoutWithCompositeIDFilter!]
  disconnect: [FindUniqueRelationsUniqueFilter!]
  set: [FindUniqueRelationsUniqueFilter!]
  update: [WithCompositeIDUpdateFindUniqueRelationsRelationInputUpdate!]
  updateMany: [WithCompositeIDUpdateFindUniqueRelationsRelationInputUpdateMany!]
}

input WithCompositeIDUpdateFindUniqueRelationsRelationInputUpdate {
  data: FindUniqueRelationsUpdateWithoutWithCompositeID
  where: FindUniqueRelationsUniqueFilter
}

input WithCompositeIDUpdateFindUniqueRelationsRelationInputUpdateMany {
  data: FindUniqueRelationsUpdateWithoutWithCompositeID
  where: FindUniqueRelationsWithoutWithCompositeIDFilter
}

input WithCompositeIDUpdateWithoutFindUniqueRelations {
  a: String
  b: String
}

input WithCompositeUniqueCreate {
  FindUniqueRelations: WithCompositeUniqueCreateFindUniqueRelationsRelationInput
  a: String!
  b: String!
  c: String
}

input WithCompositeUniqueCreateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithCompositeUnique!]
}

input WithCompositeUniqueCreateWithoutFindUniqueRelations {
  a: String!
  b: String!
  c: String
}

input WithCompositeUniqueFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  a: StringFilter
  b: StringFilter
  c: StringFilter
}

input WithCompositeUniqueOrderBy {
  FindUniqueRelations: FindUniqueRelationsOrderBy
  a: OrderBy
  b: OrderBy
  c: OrderBy
}

input WithCompositeUniqueUniqueFilter {
  a_b: String
  a_c: String
  c: String
}

input WithCompositeUniqueUpdate {
  FindUniqueRelations: WithCompositeUniqueUpdateFindUniqueRelationsRelationInput
  a: String
  b: String
  c: String
}

input WithCompositeUniqueUpdateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithCompositeUnique!]
  delete: [FindUniqueRelationsUniqueFilter!]
  deleteMany: [FindUniqueRelationsWithoutWithCompositeUniqueFilter!]
  disconnect: [FindUniqueRelationsUniqueFilter!]
  set: [FindUniqueRelationsUniqueFilter!]
  update: [WithCompositeUniqueUpdateFindUniqueRelationsRelationInputUpdate!]
  updateMany: [WithCompositeUniqueUpdateFindUniqueRelationsRelationInputUpdateMany!]
}

input WithCompositeUniqueUpdateFindUniqueRelationsRelationInputUpdate {
  data: FindUniqueRelationsUpdateWithoutWithCompositeUnique
  where: FindUniqueRelationsUniqueFilter
}

input WithCompositeUniqueUpdateFindUniqueRelationsRelationInputUpdateMany {
  data: FindUniqueRelationsUpdateWithoutWithCompositeUnique
  where: FindUniqueRelationsWithoutWithCompositeUniqueFilter
}

input WithCompositeUniqueUpdateWithoutFindUniqueRelations {
  a: String
  b: String
  c: String
}

input WithIDCreate {
  FindUniqueRelations: WithIDCreateFindUniqueRelationsRelationInput
  id: String!
}

input WithIDCreateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithID!]
}

input WithIDCreateWithoutFindUniqueRelations {
  id: String!
}

input WithIDFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  id: StringFilter
}

input WithIDOrderBy {
  FindUniqueRelations: FindUniqueRelationsOrderBy
  id: OrderBy
}

input WithIDUniqueFilter {
  id: String
}

input WithIDUpdate {
  FindUniqueRelations: WithIDUpdateFindUniqueRelationsRelationInput
  id: String
}

input WithIDUpdateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithID!]
  delete: [FindUniqueRelationsUniqueFilter!]
  deleteMany: [FindUniqueRelationsWithoutWithIDFilter!]
  disconnect: [FindUniqueRelationsUniqueFilter!]
  set: [FindUniqueRelationsUniqueFilter!]
  update: [WithIDUpdateFindUniqueRelationsRelationInputUpdate!]
  updateMany: [WithIDUpdateFindUniqueRelationsRelationInputUpdateMany!]
}

input WithIDUpdateFindUniqueRelationsRelationInputUpdate {
  data: FindUniqueRelationsUpdateWithoutWithID
  where: FindUniqueRelationsUniqueFilter
}

input WithIDUpdateFindUniqueRelationsRelationInputUpdateMany {
  data: FindUniqueRelationsUpdateWithoutWithID
  where: FindUniqueRelationsWithoutWithIDFilter
}

input WithIDUpdateWithoutFindUniqueRelations {
  id: String
}

input WithUniqueCreate {
  FindUniqueRelations: WithUniqueCreateFindUniqueRelationsRelationInput
  id: String!
}

input WithUniqueCreateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithUnique!]
}

input WithUniqueCreateWithoutFindUniqueRelations {
  id: String!
}

input WithUniqueFilter {
  FindUniqueRelations: FindUniqueRelationsListFilter
  id: StringFilter
}

input WithUniqueOrderBy {
  FindUniqueRelations: FindUniqueRelationsOrderBy
  id: OrderBy
}

input WithUniqueUniqueFilter {
  id: String
}

input WithUniqueUpdate {
  FindUniqueRelations: WithUniqueUpdateFindUniqueRelationsRelationInput
  id: String
}

input WithUniqueUpdateFindUniqueRelationsRelationInput {
  connect: [FindUniqueRelationsUniqueFilter!]
  create: [FindUniqueRelationsCreateWithoutWithUnique!]
  delete: [FindUniqueRelationsUniqueFilter!]
  deleteMany: [FindUniqueRelationsWithoutWithUniqueFilter!]
  disconnect: [FindUniqueRelationsUniqueFilter!]
  set: [FindUniqueRelationsUniqueFilter!]
  update: [WithUniqueUpdateFindUniqueRelationsRelationInputUpdate!]
  updateMany: [WithUniqueUpdateFindUniqueRelationsRelationInputUpdateMany!]
}

input WithUniqueUpdateFindUniqueRelationsRelationInputUpdate {
  data: FindUniqueRelationsUpdateWithoutWithUnique
  where: FindUniqueRelationsUniqueFilter
}

input WithUniqueUpdateFindUniqueRelationsRelationInputUpdateMany {
  data: FindUniqueRelationsUpdateWithoutWithUnique
  where: FindUniqueRelationsWithoutWithUniqueFilter
}

input WithUniqueUpdateWithoutFindUniqueRelations {
  id: String
}