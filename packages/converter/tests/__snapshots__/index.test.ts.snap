// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Code generator > example schema 1`] = `
"import SchemaBuilder from "@pothos/core";
const builder = new SchemaBuilder<{
    Context: {};
    Objects: {
        Article: unknown;
        Giraffe: unknown;
        Sheep: unknown;
        User: unknown;
    };
    Interfaces: {
        Animal: unknown;
        Countable: unknown;
        Shaveable: unknown;
    };
    Scalars: {
        Date: {
            Input: unknown;
            Output: unknown;
        };
    };
}>({});
builder.scalarType('Date', {
    serialize: () => { throw new Error('Not implemented'); },
});
const MyEnum = builder.enumType('MyEnum', {
    values: {
        Bar: {
            value: 'bar' as const,
        },
        Foo: {
            value: 'foo' as const,
        },
        Num: {
            value: 5 as const,
        },
    },
});
const SearchResult = builder.unionType('SearchResult', {
    types: ['Article', 'User'],
    resolveType: (parent, context, info) => {
        throw new Error('Not implemented');
    }
});
const stuff = builder.enumType('stuff', {
    values: {
        BattlestarGalactica: {
            value: 'BattlestarGalactica' as const,
        },
        Bears: {
            value: 'Bears' as const,
        },
        Beats: {
            value: 'Beats' as const,
        },
    },
});
const Example = builder.inputType('Example', {
    fields: t => ({
        date: t.field({
            type: 'Date',
            required: false,
        }),
        enum: t.field({
            type: MyEnum,
            required: false,
        }),
        id: t.field({
            type: 'ID',
            required: true,
        }),
        id2: t.field({
            type: 'Int',
            required: false,
        }),
        ids: t.field({
            type: ['ID'],
            required: { list: true, items: true },
        }),
        ids2: t.field({
            type: ['Int'],
            required: { list: false, items: true },
        }),
    }),
});
interface Example2Shape {
    example: {
        date: unknown | null | undefined;
        enum: 'bar' | 'foo' | 5 | null | undefined;
        id: (string | number);
        id2: number | null | undefined;
        ids: (string | number)[];
        ids2: number[] | null | undefined;
    };
    id: (string | number) | null | undefined;
    ids: (string | number)[];
    more: Example2Shape;
}
const Example2 = builder.inputRef<Example2Shape>('Example2');
Example2.implement({
    fields: t => ({
        example: t.field({
            type: Example,
            required: true,
        }),
        id: t.field({
            type: 'ID',
            required: false,
        }),
        ids: t.field({
            type: ['ID'],
            required: { list: true, items: true },
        }),
        more: t.field({
            type: Example2,
            required: true,
        }),
    }),
});
const Animal = builder.interfaceType('Animal', {
    fields: t => ({
        species: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
const Countable = builder.interfaceType('Countable', {
    fields: t => ({
        count: t.field({
            args: {
                max: t.arg({
                    type: 'Int',
                    required: true,
                }),
            },
            type: 'Int',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
const Shaveable = builder.interfaceType('Shaveable', {
    fields: t => ({
        extendMePlease: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        id: t.field({
            type: 'ID',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        shaved: t.field({
            type: 'Boolean',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.objectType('Article', {
    description: "shape can be last arg",
    fields: t => ({
        comments: t.field({
            type: ['String'],
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        title: t.field({
            description: "Title of the article, probably click bait",
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.objectType('Giraffe', {
    interfaces: [Animal],
    isTypeOf: (obj, context, info) => { throw new Error('Not implemented'); },
    fields: t => ({
        age: t.field({
            type: 'Int',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        favoriteFood: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        name: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.queryType({
    fields: t => ({
        sheep: t.field({
            type: 'Sheep',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        stuff: t.field({
            type: [stuff],
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        user: t.field({
            type: 'User',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.objectType('Sheep', {
    interfaces: [Countable, Shaveable],
    isTypeOf: (obj, context, info) => { throw new Error('Not implemented'); },
    fields: t => ({
        color: t.field({
            args: {
                id: t.arg({
                    type: 'ID',
                    required: false,
                }),
            },
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        thing: t.field({
            type: stuff,
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.subscriptionType({
    fields: t => ({
        event: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
            subscribe: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.objectType('User', {
    fields: t => ({
        defaultArgs: t.field({
            args: {
                ids: t.arg({
                    type: ['ID'],
                    required: { list: true, items: true },
                    defaultValue: ["abc"],
                }),
            },
            type: ['ID'],
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        displayName: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        fact: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        firstBornChild: t.field({
            type: 'User',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        firstName: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        friends: t.field({
            type: ['User'],
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        id: t.field({
            type: 'ID',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        lastName: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        list: t.field({
            args: {
                ids: t.arg({
                    type: ['ID'],
                    required: { list: true, items: true },
                }),
            },
            type: ['ID'],
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        newField: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        notSparseList: t.field({
            args: {
                ids: t.arg({
                    type: ['ID'],
                    required: { list: true, items: true },
                }),
            },
            type: ['ID'],
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        optional: t.field({
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        partialName: t.field({
            args: {
                example: t.arg({
                    type: Example,
                    required: true,
                }),
                firstN: t.arg({
                    type: 'Int',
                    required: true,
                }),
            },
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        recursiveArgs: t.field({
            args: {
                example2: t.arg({
                    type: Example2,
                    required: true,
                }),
                firstN: t.arg({
                    type: 'ID',
                    required: false,
                }),
            },
            type: 'ID',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        related: t.field({
            type: SearchResult,
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        sparseList: t.field({
            args: {
                ids: t.arg({
                    type: ['ID'],
                    required: { list: true, items: false },
                }),
            },
            type: ['ID'],
            nullable: { list: false, items: true },
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        stuff: t.field({
            type: ['String'],
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
export const schema = builder.toSchema();
"
`;

exports[`Code generator > example schema 2`] = `
"interface Animal {
  species: String
}

"""shape can be last arg"""
type Article {
  comments: [String!]

  """Title of the article, probably click bait"""
  title: String
}

interface Countable {
  count(max: Int!): Int
}

scalar Date

input Example {
  date: Date
  enum: MyEnum
  id: ID!
  id2: Int
  ids: [ID!]!
  ids2: [Int!]
}

input Example2 {
  example: Example!
  id: ID
  ids: [ID!]!
  more: Example2!
}

type Giraffe implements Animal {
  age: Int
  favoriteFood: String
  name: String
  species: String
}

enum MyEnum {
  Bar
  Foo
  Num
}

type Query {
  sheep: Sheep
  stuff: [stuff!]
  user: User
}

union SearchResult = Article | User

interface Shaveable {
  extendMePlease: String
  id: ID
  shaved: Boolean
}

type Sheep implements Countable & Shaveable {
  color(id: ID): String
  count(max: Int!): Int
  extendMePlease: String
  id: ID
  shaved: Boolean
  thing: stuff
}

type Subscription {
  event: String
}

type User {
  defaultArgs(ids: [ID!]! = ["abc"]): [ID!]
  displayName: String
  fact: String
  firstBornChild: User
  firstName: String
  friends: [User!]
  id: ID
  lastName: String
  list(ids: [ID!]!): [ID!]
  newField: String
  notSparseList(ids: [ID!]!): [ID!]
  optional: String
  partialName(example: Example!, firstN: Int!): String
  recursiveArgs(example2: Example2!, firstN: ID): ID
  related: SearchResult
  sparseList(ids: [ID]!): [ID]!
  stuff: [String!]
}

enum stuff {
  BattlestarGalactica
  Bears
  Beats
}
"
`;

exports[`Code generator > starwars schema 1`] = `
"import SchemaBuilder from "@pothos/core";
const builder = new SchemaBuilder<{
    Context: {};
    Objects: {
        Droid: unknown;
        Human: unknown;
    };
    Interfaces: {
        Character: unknown;
    };
}>({});
const Episode = builder.enumType('Episode', {
    description: "One of the films in the Star Wars Trilogy",
    values: {
        EMPIRE: {
            description: "Released in 1980.",
            value: 5 as const,
        },
        JEDI: {
            description: "Released in 1983",
            value: 6 as const,
        },
        NEWHOPE: {
            description: "Released in 1977.",
            value: 4 as const,
        },
    },
});
const Character = builder.interfaceType('Character', {
    fields: t => ({
        appearsIn: t.field({
            description: "Which movies they appear in.",
            type: [Episode],
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        friends: t.field({
            description: "The friends of the character, or an empty list if they have none.",
            type: ['Character'],
            nullable: { list: false, items: true },
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        id: t.field({
            description: "The id of the character",
            type: 'ID',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        name: t.field({
            description: "The name of the character",
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.objectType('Droid', {
    description: "A mechanical creature in the Star Wars universe.",
    interfaces: [Character],
    isTypeOf: (obj, context, info) => { throw new Error('Not implemented'); },
    fields: t => ({
        primaryFunction: t.field({
            description: "The primary function of the droid.",
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.objectType('Human', {
    description: "A humanoid creature in the Star Wars universe.",
    interfaces: [Character],
    isTypeOf: (obj, context, info) => { throw new Error('Not implemented'); },
    fields: t => ({
        homePlanet: t.field({
            description: "The home planet of the human, or null if unknown.",
            type: 'String',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
builder.queryType({
    fields: t => ({
        droid: t.field({
            args: {
                id: t.arg({
                    type: 'ID',
                    description: "id of the character",
                    required: true,
                }),
            },
            type: 'Droid',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        hero: t.field({
            args: {
                episode: t.arg({
                    type: Episode,
                    description: "If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.",
                    required: true,
                }),
            },
            type: 'Character',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        human: t.field({
            args: {
                id: t.arg({
                    type: 'ID',
                    description: "id of the character",
                    required: true,
                }),
            },
            type: 'Human',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        }),
        r2d2: t.field({
            type: 'Droid',
            resolve: (parent, args, context, info) => { throw new Error('Not implemented'); },
        })
    }),
});
export const schema = builder.toSchema();
"
`;

exports[`Code generator > starwars schema 2`] = `
"interface Character {
  """Which movies they appear in."""
  appearsIn: [Episode!]

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The id of the character"""
  id: ID

  """The name of the character"""
  name: String
}

"""A mechanical creature in the Star Wars universe."""
type Droid implements Character {
  """Which movies they appear in."""
  appearsIn: [Episode!]

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The id of the character"""
  id: ID

  """The name of the character"""
  name: String

  """The primary function of the droid."""
  primaryFunction: String
}

"""One of the films in the Star Wars Trilogy"""
enum Episode {
  """Released in 1980."""
  EMPIRE

  """Released in 1983"""
  JEDI

  """Released in 1977."""
  NEWHOPE
}

"""A humanoid creature in the Star Wars universe."""
type Human implements Character {
  """Which movies they appear in."""
  appearsIn: [Episode!]

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The home planet of the human, or null if unknown."""
  homePlanet: String

  """The id of the character"""
  id: ID

  """The name of the character"""
  name: String
}

type Query {
  droid(
    """id of the character"""
    id: ID!
  ): Droid
  hero(
    """
    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.
    """
    episode: Episode!
  ): Character
  human(
    """id of the character"""
    id: ID!
  ): Human
  r2d2: Droid
}
"
`;
